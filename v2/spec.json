{
	"id": 0,
	"name": "@supabase/supabase-js",
	"kind": 1,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "index",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 218,
					"name": "QueryData",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 22,
							"character": 50
						}
					],
					"target": 114
				},
				{
					"id": 219,
					"name": "QueryError",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 22,
							"character": 61
						}
					],
					"target": 118
				},
				{
					"id": 217,
					"name": "QueryResult",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 22,
							"character": 37
						}
					],
					"target": 112
				},
				{
					"id": 216,
					"name": "SupabaseClientOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 22,
							"character": 14
						}
					],
					"target": 70
				},
				{
					"id": 121,
					"name": "SupabaseClient",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Supabase Client.",
						"text": "An isomorphic Javascript client for interacting with Postgres.\n"
					},
					"children": [
						{
							"id": 122,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 70,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 123,
									"name": "new SupabaseClient",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new client for use in the browser."
									},
									"typeParameter": [
										{
											"id": 124,
											"name": "Database",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 125,
											"name": "SchemaName",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"default": {
												"type": "conditional",
												"checkType": {
													"type": "literal",
													"value": "public"
												},
												"extendsType": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"id": 124,
														"name": "Database"
													}
												},
												"trueType": {
													"type": "literal",
													"value": "public"
												},
												"falseType": {
													"type": "intersection",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"id": 124,
																"name": "Database"
															}
														}
													]
												}
											}
										},
										{
											"id": 126,
											"name": "Schema",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 107,
												"name": "GenericSchema"
											},
											"default": {
												"type": "conditional",
												"checkType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"id": 125,
														"name": "SchemaName"
													},
													"objectType": {
														"type": "reference",
														"id": 124,
														"name": "Database"
													}
												},
												"extendsType": {
													"type": "reference",
													"id": 107,
													"name": "GenericSchema"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "any"
													},
													"objectType": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												"falseType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 127,
											"name": "supabaseUrl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The unique Supabase URL which is supplied when you create a new project in your project dashboard."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 128,
											"name": "supabaseKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The unique Supabase Key which is supplied when you create a new project in your project dashboard."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 129,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 70,
												"typeArguments": [
													{
														"type": "reference",
														"id": 125,
														"name": "SchemaName"
													}
												],
												"name": "SupabaseClientOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 121,
										"typeArguments": [
											{
												"type": "reference",
												"id": 124,
												"name": "Database"
											},
											{
												"type": "reference",
												"id": 125,
												"name": "SchemaName"
											},
											{
												"type": "reference",
												"id": 126,
												"name": "Schema"
											}
										],
										"name": "default"
									}
								}
							]
						},
						{
							"id": 144,
							"name": "accessToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 54,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 145,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 146,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"qualifiedName": "Promise",
												"package": "typescript",
												"name": "Promise"
											}
										}
									]
								}
							}
						},
						{
							"id": 130,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies."
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 43,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "SupabaseAuthClient"
							}
						},
						{
							"id": 133,
							"name": "authUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 47,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 143,
							"name": "changedAccessToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 53,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 138,
							"name": "fetch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 52,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 139,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 140,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 141,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "RequestInfo",
																"package": "typescript",
																"name": "RequestInfo"
															},
															{
																"type": "reference",
																"qualifiedName": "URL",
																"package": "typescript",
																"name": "URL"
															}
														]
													}
												},
												{
													"id": 142,
													"name": "init",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"qualifiedName": "RequestInit",
														"package": "typescript",
														"name": "RequestInit"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "Response",
														"package": "typescript",
														"name": "Response"
													}
												],
												"qualifiedName": "Promise",
												"package": "typescript",
												"name": "Promise"
											}
										}
									]
								}
							}
						},
						{
							"id": 135,
							"name": "functionsUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 49,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 147,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 56,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"qualifiedName": "Record",
								"package": "typescript",
								"name": "Record"
							}
						},
						{
							"id": 131,
							"name": "realtime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 44,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "RealtimeClient",
								"package": "@supabase/realtime-js",
								"name": "default"
							}
						},
						{
							"id": 132,
							"name": "realtimeUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 46,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 136,
							"name": "rest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 50,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 124,
										"name": "Database"
									},
									{
										"type": "reference",
										"id": 125,
										"name": "SchemaName"
									},
									{
										"type": "conditional",
										"checkType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 125,
												"name": "SchemaName"
											},
											"objectType": {
												"type": "reference",
												"id": 124,
												"name": "Database"
											}
										},
										"extendsType": {
											"type": "reference",
											"qualifiedName": "GenericSchema",
											"package": "@supabase/postgrest-js",
											"name": "GenericSchema"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "any"
											},
											"objectType": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"qualifiedName": "PostgrestClient",
								"package": "@supabase/postgrest-js",
								"name": "default"
							}
						},
						{
							"id": 137,
							"name": "storageKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 51,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 134,
							"name": "storageUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 48,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 149,
							"name": "supabaseKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 148,
							"name": "supabaseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 150,
							"name": "functions",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 136,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 151,
									"name": "functions",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Supabase Functions allows you to deploy and invoke edge functions."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "FunctionsClient",
										"package": "@supabase/functions-js",
										"name": "FunctionsClient"
									}
								}
							]
						},
						{
							"id": 152,
							"name": "storage",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 146,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 153,
									"name": "storage",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Supabase Storage allows you to manage user-generated content, such as photos or videos."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "StorageClient",
										"package": "@supabase/storage-js",
										"name": "StorageClient"
									}
								}
							]
						},
						{
							"id": 191,
							"name": "_getAccessToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 264,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 192,
									"name": "_getAccessToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 208,
							"name": "_handleTokenChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 322,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 209,
									"name": "_handleTokenChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 210,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "AuthChangeEvent",
												"package": "@supabase/auth-js",
												"name": "AuthChangeEvent"
											}
										},
										{
											"id": 211,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "CLIENT"
													},
													{
														"type": "literal",
														"value": "STORAGE"
													}
												]
											}
										},
										{
											"id": 212,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 202,
							"name": "_initRealtimeClient",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 308,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 203,
									"name": "_initRealtimeClient",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 204,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "RealtimeClientOptions",
												"package": "@supabase/realtime-js",
												"name": "RealtimeClientOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "RealtimeClient",
										"package": "@supabase/realtime-js",
										"name": "default"
									}
								}
							]
						},
						{
							"id": 193,
							"name": "_initSupabaseAuthClient",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 274,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 194,
									"name": "_initSupabaseAuthClient",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 195,
											"name": "__namedParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 68,
												"name": "SupabaseAuthClientOptions"
											}
										},
										{
											"id": 196,
											"name": "headers",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"qualifiedName": "Record",
												"package": "typescript",
												"name": "Record"
											}
										},
										{
											"id": 197,
											"name": "fetch",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 198,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 199,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 200,
																	"name": "input",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "reference",
																				"qualifiedName": "RequestInfo",
																				"package": "typescript",
																				"name": "RequestInfo"
																			},
																			{
																				"type": "reference",
																				"qualifiedName": "URL",
																				"package": "typescript",
																				"name": "URL"
																			}
																		]
																	}
																},
																{
																	"id": 201,
																	"name": "init",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "RequestInit",
																		"package": "typescript",
																		"name": "RequestInit"
																	}
																}
															],
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"qualifiedName": "Response",
																		"package": "typescript",
																		"name": "Response"
																	}
																],
																"qualifiedName": "Promise",
																"package": "typescript",
																"name": "Promise"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SupabaseAuthClient"
									}
								}
							]
						},
						{
							"id": 205,
							"name": "_listenForAuthEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 315,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 206,
									"name": "_listenForAuthEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 207,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									}
								}
							]
						},
						{
							"id": 180,
							"name": "channel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 236,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 181,
									"name": "channel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Realtime channel with Broadcast, Presence, and Postgres Changes."
									},
									"parameters": [
										{
											"id": 182,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The name of the Realtime channel."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 183,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The options to pass to the Realtime channel.\n\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "RealtimeChannelOptions",
												"package": "@supabase/realtime-js",
												"name": "RealtimeChannelOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "RealtimeChannel",
										"package": "@supabase/realtime-js",
										"name": "default"
									}
								}
							]
						},
						{
							"id": 154,
							"name": "from",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 151,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 155,
									"name": "from",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a query on a table or a view."
									},
									"typeParameter": [
										{
											"id": 156,
											"name": "TableName",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 157,
											"name": "Table",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 93,
												"name": "GenericTable"
											}
										}
									],
									"parameters": [
										{
											"id": 158,
											"name": "relation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The table or view name to query\n"
											},
											"type": {
												"type": "reference",
												"id": 156,
												"name": "TableName"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 126,
												"name": "Schema"
											},
											{
												"type": "reference",
												"id": 157,
												"name": "Table"
											},
											{
												"type": "reference",
												"id": 156,
												"name": "TableName"
											},
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"id": 157,
													"name": "Table"
												},
												"extendsType": {
													"type": "reflection",
													"declaration": {
														"id": 159,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {}
													}
												},
												"trueType": {
													"type": "reference",
													"qualifiedName": "R",
													"package": "@supabase/postgrest-js",
													"name": "R"
												},
												"falseType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										],
										"qualifiedName": "PostgrestQueryBuilder",
										"package": "@supabase/postgrest-js",
										"name": "default"
									}
								},
								{
									"id": 160,
									"name": "from",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a query on a table or a view."
									},
									"typeParameter": [
										{
											"id": 161,
											"name": "ViewName",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 162,
											"name": "View",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 102,
												"name": "GenericView"
											}
										}
									],
									"parameters": [
										{
											"id": 163,
											"name": "relation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The table or view name to query\n"
											},
											"type": {
												"type": "reference",
												"id": 161,
												"name": "ViewName"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 126,
												"name": "Schema"
											},
											{
												"type": "reference",
												"id": 162,
												"name": "View"
											},
											{
												"type": "reference",
												"id": 161,
												"name": "ViewName"
											},
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"id": 162,
													"name": "View"
												},
												"extendsType": {
													"type": "reflection",
													"declaration": {
														"id": 164,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {}
													}
												},
												"trueType": {
													"type": "reference",
													"qualifiedName": "R",
													"package": "@supabase/postgrest-js",
													"name": "R"
												},
												"falseType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										],
										"qualifiedName": "PostgrestQueryBuilder",
										"package": "@supabase/postgrest-js",
										"name": "default"
									}
								}
							]
						},
						{
							"id": 184,
							"name": "getChannels",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 243,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 185,
									"name": "getChannels",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all Realtime channels."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "RealtimeChannel",
											"package": "@supabase/realtime-js",
											"name": "default"
										}
									}
								}
							]
						},
						{
							"id": 189,
							"name": "removeAllChannels",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 260,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 190,
									"name": "removeAllChannels",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unsubscribes and removes all Realtime channels from Realtime client."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "literal",
															"value": "error"
														},
														{
															"type": "literal",
															"value": "ok"
														},
														{
															"type": "literal",
															"value": "timed out"
														}
													]
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 186,
							"name": "removeChannel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 253,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 187,
									"name": "removeChannel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unsubscribes and removes Realtime channel from Realtime client."
									},
									"parameters": [
										{
											"id": 188,
											"name": "channel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The name of the Realtime channel.\n\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "RealtimeChannel",
												"package": "@supabase/realtime-js",
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "error"
													},
													{
														"type": "literal",
														"value": "ok"
													},
													{
														"type": "literal",
														"value": "timed out"
													}
												]
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 169,
							"name": "rpc",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 209,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 170,
									"name": "rpc",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a function call."
									},
									"typeParameter": [
										{
											"id": 171,
											"name": "FnName",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 172,
											"name": "Fn",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 103,
												"name": "GenericFunction"
											}
										}
									],
									"parameters": [
										{
											"id": 173,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The function name to call"
											},
											"type": {
												"type": "reference",
												"id": 171,
												"name": "FnName"
											}
										},
										{
											"id": 174,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The arguments to pass to the function call"
											},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "literal",
													"value": "Args"
												},
												"objectType": {
													"type": "reference",
													"id": 172,
													"name": "Fn"
												}
											},
											"defaultValue": "{}"
										},
										{
											"id": 175,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Named parameters"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 176,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 179,
															"name": "count",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Count algorithm to use to count rows returned by the\nfunction. Only applicable for [set-returning\nfunctions](https://www.postgresql.org/docs/current/functions-srf.html).\n\n`\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\nhood.\n\n`\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\nstatistics under the hood.\n\n`\"estimated\"`: Uses exact count for low numbers and planned count for high\nnumbers.\n"
															},
															"sources": [
																{
																	"fileName": "src/SupabaseClient.ts",
																	"line": 215,
																	"character": 6
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": "exact"
																	},
																	{
																		"type": "literal",
																		"value": "planned"
																	},
																	{
																		"type": "literal",
																		"value": "estimated"
																	}
																]
															}
														},
														{
															"id": 178,
															"name": "get",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "When set to `true`, the function will be called with\nread-only access mode."
															},
															"sources": [
																{
																	"fileName": "src/SupabaseClient.ts",
																	"line": 214,
																	"character": 6
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 177,
															"name": "head",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "When set to `true`, `data` will not be returned.\nUseful if you only need the count."
															},
															"sources": [
																{
																	"fileName": "src/SupabaseClient.ts",
																	"line": 213,
																	"character": 6
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																179,
																178,
																177
															]
														}
													]
												}
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 126,
												"name": "Schema"
											},
											{
												"type": "conditional",
												"checkType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "Returns"
													},
													"objectType": {
														"type": "reference",
														"id": 172,
														"name": "Fn"
													}
												},
												"extendsType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												"trueType": {
													"type": "conditional",
													"checkType": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "indexedAccess",
															"indexType": {
																"type": "intrinsic",
																"name": "any"
															},
															"objectType": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													},
													"extendsType": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"qualifiedName": "Record",
														"package": "typescript",
														"name": "Record"
													},
													"trueType": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "any"
														},
														"objectType": {
															"type": "intrinsic",
															"name": "any"
														}
													},
													"falseType": {
														"type": "intrinsic",
														"name": "never"
													}
												},
												"falseType": {
													"type": "intrinsic",
													"name": "never"
												}
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "literal",
													"value": "Returns"
												},
												"objectType": {
													"type": "reference",
													"id": 172,
													"name": "Fn"
												}
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "PostgrestFilterBuilder",
										"package": "@supabase/postgrest-js",
										"name": "default"
									}
								}
							]
						},
						{
							"id": 165,
							"name": "schema",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/SupabaseClient.ts",
									"line": 175,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 166,
									"name": "schema",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Select a schema to query or perform an function (rpc) call.",
										"text": "The schema needs to be on the list of exposed schemas inside Supabase.\n"
									},
									"typeParameter": [
										{
											"id": 167,
											"name": "DynamicSchema",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"parameters": [
										{
											"id": 168,
											"name": "schema",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The schema to query\n"
											},
											"type": {
												"type": "reference",
												"id": 167,
												"name": "DynamicSchema"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 124,
												"name": "Database"
											},
											{
												"type": "reference",
												"id": 167,
												"name": "DynamicSchema"
											},
											{
												"type": "conditional",
												"checkType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"id": 167,
														"name": "DynamicSchema"
													},
													"objectType": {
														"type": "reference",
														"id": 124,
														"name": "Database"
													}
												},
												"extendsType": {
													"type": "reference",
													"id": 107,
													"name": "GenericSchema"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "any"
													},
													"objectType": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												"falseType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"qualifiedName": "PostgrestClient",
										"package": "@supabase/postgrest-js",
										"name": "default"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								122
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								144,
								130,
								133,
								143,
								138,
								135,
								147,
								131,
								132,
								136,
								137,
								134,
								149,
								148
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								150,
								152
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								191,
								208,
								202,
								193,
								205,
								180,
								154,
								184,
								189,
								186,
								169,
								165
							]
						}
					],
					"sources": [
						{
							"fileName": "src/SupabaseClient.ts",
							"line": 31,
							"character": 21
						}
					],
					"typeParameter": [
						{
							"id": 213,
							"name": "Database",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 214,
							"name": "SchemaName",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 124,
											"name": "Database"
										}
									}
								]
							},
							"default": {
								"type": "conditional",
								"checkType": {
									"type": "literal",
									"value": "public"
								},
								"extendsType": {
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"id": 124,
										"name": "Database"
									}
								},
								"trueType": {
									"type": "literal",
									"value": "public"
								},
								"falseType": {
									"type": "intersection",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"id": 124,
												"name": "Database"
											}
										}
									]
								}
							}
						},
						{
							"id": 215,
							"name": "Schema",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 107,
								"name": "GenericSchema"
							},
							"default": {
								"type": "conditional",
								"checkType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "reference",
										"id": 125,
										"name": "SchemaName"
									},
									"objectType": {
										"type": "reference",
										"id": 124,
										"name": "Database"
									}
								},
								"extendsType": {
									"type": "reference",
									"id": 107,
									"name": "GenericSchema"
								},
								"trueType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "reference",
										"id": 125,
										"name": "SchemaName"
									},
									"objectType": {
										"type": "reference",
										"id": 124,
										"name": "Database"
									}
								},
								"falseType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 2,
					"name": "createClient",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 27,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "createClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new Supabase Client."
							},
							"typeParameter": [
								{
									"id": 4,
									"name": "Database",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 5,
									"name": "SchemaName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "literal",
											"value": "public"
										},
										"extendsType": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"id": 4,
												"name": "Database"
											}
										},
										"trueType": {
											"type": "literal",
											"value": "public"
										},
										"falseType": {
											"type": "intersection",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"id": 4,
														"name": "Database"
													}
												}
											]
										}
									}
								},
								{
									"id": 6,
									"name": "Schema",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 107,
										"name": "GenericSchema"
									},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 5,
												"name": "SchemaName"
											},
											"objectType": {
												"type": "reference",
												"id": 4,
												"name": "Database"
											}
										},
										"extendsType": {
											"type": "reference",
											"id": 107,
											"name": "GenericSchema"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "any"
											},
											"objectType": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 7,
									"name": "supabaseUrl",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 8,
									"name": "supabaseKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 9,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 70,
										"typeArguments": [
											{
												"type": "reference",
												"id": 5,
												"name": "SchemaName"
											}
										],
										"name": "SupabaseClientOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 121,
								"typeArguments": [
									{
										"type": "reference",
										"id": 4,
										"name": "Database"
									},
									{
										"type": "reference",
										"id": 5,
										"name": "SchemaName"
									},
									{
										"type": "reference",
										"id": 6,
										"name": "Schema"
									}
								],
								"name": "default"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						218,
						219,
						217,
						216
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						121
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "src/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 10,
			"name": "lib/constants",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 22,
					"name": "DEFAULT_AUTH_OPTIONS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/lib/constants.ts",
							"line": 28,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"id": 68,
						"name": "SupabaseAuthClientOptions"
					},
					"defaultValue": "..."
				},
				{
					"id": 19,
					"name": "DEFAULT_DB_OPTIONS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/lib/constants.ts",
							"line": 24,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 20,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 21,
									"name": "schema",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/constants.ts",
											"line": 25,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'public'"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										21
									]
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 14,
					"name": "DEFAULT_GLOBAL_OPTIONS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/lib/constants.ts",
							"line": 20,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 15,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 16,
									"name": "headers",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/constants.ts",
											"line": 21,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 17,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 18,
													"name": "X-Client-Info",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "src/lib/constants.ts",
															"line": 18,
															"character": 33
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														18
													]
												}
											]
										}
									},
									"defaultValue": "DEFAULT_HEADERS"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										16
									]
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 11,
					"name": "DEFAULT_HEADERS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/lib/constants.ts",
							"line": 18,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 12,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 13,
									"name": "X-Client-Info",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/constants.ts",
											"line": 18,
											"character": 33
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										13
									]
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 23,
					"name": "DEFAULT_REALTIME_OPTIONS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/lib/constants.ts",
							"line": 35,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "RealtimeClientOptions",
						"package": "@supabase/realtime-js",
						"name": "RealtimeClientOptions"
					},
					"defaultValue": "{}"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						22,
						19,
						14,
						11,
						23
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/constants.ts",
					"line": 2,
					"character": 0
				}
			]
		},
		{
			"id": 24,
			"name": "lib/fetch",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 38,
					"name": "fetchWithAuth",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/fetch.ts",
							"line": 26,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 39,
							"name": "fetchWithAuth",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 40,
									"name": "supabaseKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 41,
									"name": "getAccessToken",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 42,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 43,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": null
																	},
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															}
														],
														"qualifiedName": "Promise",
														"package": "typescript",
														"name": "Promise"
													}
												}
											]
										}
									}
								},
								{
									"id": 44,
									"name": "customFetch",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 45,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 46,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 47,
															"name": "input",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"qualifiedName": "RequestInfo",
																		"package": "typescript",
																		"name": "RequestInfo"
																	},
																	{
																		"type": "reference",
																		"qualifiedName": "URL",
																		"package": "typescript",
																		"name": "URL"
																	}
																]
															}
														},
														{
															"id": 48,
															"name": "init",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"qualifiedName": "RequestInit",
																"package": "typescript",
																"name": "RequestInit"
															}
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"qualifiedName": "Response",
																"package": "typescript",
																"name": "Response"
															}
														],
														"qualifiedName": "Promise",
														"package": "typescript",
														"name": "Promise"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 49,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 50,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 51,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "RequestInfo",
																"package": "typescript",
																"name": "RequestInfo"
															},
															{
																"type": "reference",
																"qualifiedName": "URL",
																"package": "typescript",
																"name": "URL"
															}
														]
													}
												},
												{
													"id": 52,
													"name": "init",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"qualifiedName": "RequestInit",
														"package": "typescript",
														"name": "RequestInit"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "Response",
														"package": "typescript",
														"name": "Response"
													}
												],
												"qualifiedName": "Promise",
												"package": "typescript",
												"name": "Promise"
											}
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 25,
					"name": "resolveFetch",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/fetch.ts",
							"line": 6,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 26,
							"name": "resolveFetch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 27,
									"name": "customFetch",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 28,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 29,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 30,
															"name": "input",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"qualifiedName": "RequestInfo",
																		"package": "typescript",
																		"name": "RequestInfo"
																	},
																	{
																		"type": "reference",
																		"qualifiedName": "URL",
																		"package": "typescript",
																		"name": "URL"
																	}
																]
															}
														},
														{
															"id": 31,
															"name": "init",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"qualifiedName": "RequestInit",
																"package": "typescript",
																"name": "RequestInit"
															}
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"qualifiedName": "Response",
																"package": "typescript",
																"name": "Response"
															}
														],
														"qualifiedName": "Promise",
														"package": "typescript",
														"name": "Promise"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 32,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 33,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 34,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "RequestInfo",
																"package": "typescript",
																"name": "RequestInfo"
															},
															{
																"type": "reference",
																"qualifiedName": "URL",
																"package": "typescript",
																"name": "URL"
															}
														]
													}
												},
												{
													"id": 35,
													"name": "init",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"qualifiedName": "RequestInit",
														"package": "typescript",
														"name": "RequestInit"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "Response",
														"package": "typescript",
														"name": "Response"
													}
												],
												"qualifiedName": "Promise",
												"package": "typescript",
												"name": "Promise"
											}
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 36,
					"name": "resolveHeadersConstructor",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/fetch.ts",
							"line": 18,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "resolveHeadersConstructor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						38,
						25,
						36
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/fetch.ts",
					"line": 2,
					"character": 0
				}
			]
		},
		{
			"id": 53,
			"name": "lib/helpers",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 59,
					"name": "applySettingDefaults",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/helpers.ts",
							"line": 18,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 60,
							"name": "applySettingDefaults",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 61,
									"name": "Database",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 62,
									"name": "SchemaName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "literal",
											"value": "public"
										},
										"extendsType": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"id": 61,
												"name": "Database"
											}
										},
										"trueType": {
											"type": "literal",
											"value": "public"
										},
										"falseType": {
											"type": "intersection",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"id": 61,
														"name": "Database"
													}
												}
											]
										}
									}
								}
							],
							"parameters": [
								{
									"id": 63,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 70,
										"typeArguments": [
											{
												"type": "reference",
												"id": 62,
												"name": "SchemaName"
											}
										],
										"name": "SupabaseClientOptions"
									}
								},
								{
									"id": 64,
									"name": "defaults",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 70,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "SupabaseClientOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 70,
										"typeArguments": [
											{
												"type": "reference",
												"id": 62,
												"name": "SchemaName"
											}
										],
										"name": "SupabaseClientOptions"
									}
								],
								"qualifiedName": "Required",
								"package": "typescript",
								"name": "Required"
							}
						}
					]
				},
				{
					"id": 65,
					"name": "isBrowser",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/helpers.ts",
							"line": 16,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 66,
							"name": "isBrowser",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 56,
					"name": "stripTrailingSlash",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/helpers.ts",
							"line": 12,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 57,
							"name": "stripTrailingSlash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 58,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 54,
					"name": "uuid",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/helpers.ts",
							"line": 4,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 55,
							"name": "uuid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						59,
						65,
						56,
						54
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/helpers.ts",
					"line": 2,
					"character": 0
				}
			]
		},
		{
			"id": 67,
			"name": "lib/types",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 68,
					"name": "SupabaseAuthClientOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 7,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "AuthClientOptions"
						}
					]
				},
				{
					"id": 69,
					"name": "Fetch",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 9,
							"character": 12
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 28,
							"qualifiedName": "fetch",
							"package": "typescript",
							"name": "fetch"
						}
					}
				},
				{
					"id": 103,
					"name": "GenericFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 97,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 104,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 105,
									"name": "Args",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 98,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								},
								{
									"id": 106,
									"name": "Returns",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 99,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										105,
										106
									]
								}
							],
							"sources": [
								{
									"fileName": "src/lib/types.ts",
									"line": 97,
									"character": 30
								}
							]
						}
					}
				},
				{
					"id": 99,
					"name": "GenericNonUpdatableView",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 91,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 100,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 101,
									"name": "Row",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 92,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										101
									]
								}
							],
							"sources": [
								{
									"fileName": "src/lib/types.ts",
									"line": 91,
									"character": 38
								}
							]
						}
					}
				},
				{
					"id": 107,
					"name": "GenericSchema",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 102,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 108,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 111,
									"name": "Functions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 105,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 103,
												"name": "GenericFunction"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								},
								{
									"id": 109,
									"name": "Tables",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 103,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 93,
												"name": "GenericTable"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								},
								{
									"id": 110,
									"name": "Views",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 104,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 102,
												"name": "GenericView"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										111,
										109,
										110
									]
								}
							],
							"sources": [
								{
									"fileName": "src/lib/types.ts",
									"line": 102,
									"character": 28
								}
							]
						}
					}
				},
				{
					"id": 93,
					"name": "GenericTable",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 83,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 94,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 96,
									"name": "Insert",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 85,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								},
								{
									"id": 95,
									"name": "Row",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 84,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								},
								{
									"id": 97,
									"name": "Update",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 86,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										96,
										95,
										97
									]
								}
							],
							"sources": [
								{
									"fileName": "src/lib/types.ts",
									"line": 83,
									"character": 27
								}
							]
						}
					}
				},
				{
					"id": 98,
					"name": "GenericUpdatableView",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 89,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"id": 93,
						"name": "GenericTable"
					}
				},
				{
					"id": 102,
					"name": "GenericView",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 95,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 98,
								"name": "GenericUpdatableView"
							},
							{
								"type": "reference",
								"id": 99,
								"name": "GenericNonUpdatableView"
							}
						]
					}
				},
				{
					"id": 114,
					"name": "QueryData",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 112,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 117,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 117,
							"name": "T"
						},
						"extendsType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reflection",
									"declaration": {
										"id": 115,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 116,
												"name": "data",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "src/lib/types.ts",
														"line": 112,
														"character": 51
													}
												],
												"type": {
													"type": "inferred",
													"name": "U"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													116
												]
											}
										],
										"sources": [
											{
												"fileName": "src/lib/types.ts",
												"line": 112,
												"character": 49
											}
										]
									}
								}
							],
							"qualifiedName": "PromiseLike",
							"package": "typescript",
							"name": "PromiseLike"
						},
						"trueType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"name": "U"
								},
								{
									"type": "literal",
									"value": null
								}
							],
							"qualifiedName": "Exclude",
							"package": "typescript",
							"name": "Exclude"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 118,
					"name": "QueryError",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 113,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "PostgrestError",
						"package": "@supabase/postgrest-js",
						"name": "PostgrestError"
					}
				},
				{
					"id": 112,
					"name": "QueryResult",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Helper types for query results."
					},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 111,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 113,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 113,
							"name": "T"
						},
						"extendsType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "inferred",
									"name": "U"
								}
							],
							"qualifiedName": "PromiseLike",
							"package": "typescript",
							"name": "PromiseLike"
						},
						"trueType": {
							"type": "reference",
							"name": "U"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 70,
					"name": "SupabaseClientOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/types.ts",
							"line": 11,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 92,
							"name": "SchemaName",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 71,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 75,
									"name": "auth",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 19,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 76,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 77,
													"name": "autoRefreshToken",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Automatically refreshes the token for logged-in users. Defaults to true."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 23,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 83,
													"name": "debug",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If debug messages for authentication client are emitted. Can be used to inspect the behavior of the library."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 47,
															"character": 4
														}
													],
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "literal",
															"value": "debug"
														},
														"objectType": {
															"type": "reference",
															"id": 68,
															"name": "SupabaseAuthClientOptions"
														}
													}
												},
												{
													"id": 80,
													"name": "detectSessionInUrl",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Detect a session from the URL. Used for OAuth login callbacks. Defaults to true."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 35,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 82,
													"name": "flowType",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "OAuth flow to use - defaults to implicit flow. PKCE is recommended for mobile and server-side applications."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 43,
															"character": 4
														}
													],
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "literal",
															"value": "flowType"
														},
														"objectType": {
															"type": "reference",
															"id": 68,
															"name": "SupabaseAuthClientOptions"
														}
													}
												},
												{
													"id": 84,
													"name": "lock",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Provide your own locking mechanism based on the environment. By default no locking is done at this time.",
														"tags": [
															{
																"tag": "experimental",
																"text": "\n"
															}
														]
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 53,
															"character": 4
														}
													],
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "literal",
															"value": "lock"
														},
														"objectType": {
															"type": "reference",
															"id": 68,
															"name": "SupabaseAuthClientOptions"
														}
													}
												},
												{
													"id": 79,
													"name": "persistSession",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Whether to persist a logged-in session to storage. Defaults to true."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 31,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 81,
													"name": "storage",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "A storage provider. Used to store the logged-in session."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 39,
															"character": 4
														}
													],
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "literal",
															"value": "storage"
														},
														"objectType": {
															"type": "reference",
															"id": 68,
															"name": "SupabaseAuthClientOptions"
														}
													}
												},
												{
													"id": 78,
													"name": "storageKey",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Optional key name used for storing tokens in local storage."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 27,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														77,
														83,
														80,
														82,
														84,
														79,
														81,
														78
													]
												}
											],
											"sources": [
												{
													"fileName": "src/lib/types.ts",
													"line": 19,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 72,
									"name": "db",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The Postgres schema which your tables belong to. Must be on the list of exposed schemas in Supabase. Defaults to `public`."
									},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 15,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 73,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 74,
													"name": "schema",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 16,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"id": 92,
														"name": "SchemaName"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														74
													]
												}
											],
											"sources": [
												{
													"fileName": "src/lib/types.ts",
													"line": 15,
													"character": 7
												}
											]
										}
									}
								},
								{
									"id": 86,
									"name": "global",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 59,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 87,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 88,
													"name": "fetch",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "A custom `fetch` implementation."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 63,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"id": 69,
														"name": "Fetch"
													}
												},
												{
													"id": 89,
													"name": "headers",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Optional headers for initializing the client."
													},
													"sources": [
														{
															"fileName": "src/lib/types.ts",
															"line": 67,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														],
														"qualifiedName": "Record",
														"package": "typescript",
														"name": "Record"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														88,
														89
													]
												}
											],
											"sources": [
												{
													"fileName": "src/lib/types.ts",
													"line": 59,
													"character": 11
												}
											]
										}
									}
								},
								{
									"id": 85,
									"name": "realtime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Options passed to the realtime-js instance"
									},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 58,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "RealtimeClientOptions",
										"package": "@supabase/realtime-js",
										"name": "RealtimeClientOptions"
									}
								},
								{
									"id": 90,
									"name": "accessToken",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/lib/types.ts",
											"line": 80,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 91,
											"name": "accessToken",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Optional function for using a third-party authentication system with\nSupabase. The function should return an access token or ID token (JWT) by\nobtaining it from the third-party auth client library. Note that this\nfunction may be called concurrently and many times. Use memoization and\nlocking techniques if this is not supported by the client libraries.",
												"text": "When set, the `auth` namespace of the Supabase client cannot be used.\nCreate another client if you wish to use Supabase Auth and third-party\nauthentications concurrently in the same application.\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"qualifiedName": "Promise",
												"package": "typescript",
												"name": "Promise"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										75,
										72,
										86,
										85
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										90
									]
								}
							],
							"sources": [
								{
									"fileName": "src/lib/types.ts",
									"line": 11,
									"character": 48
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						68
					]
				},
				{
					"title": "Type Aliases",
					"kind": 4194304,
					"children": [
						69,
						103,
						99,
						107,
						93,
						98,
						102,
						114,
						118,
						112,
						70
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 119,
			"name": "lib/version",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 120,
					"name": "version",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/lib/version.ts",
							"line": 1,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "0.0.0-automated"
					},
					"defaultValue": "'0.0.0-automated'"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						120
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/version.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				1,
				10,
				24,
				53,
				67,
				119
			]
		}
	]
}